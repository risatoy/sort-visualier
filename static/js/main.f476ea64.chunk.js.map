{"version":3,"sources":["sortAlgorithms/visualize.js","constants.js","sortAlgorithms/quickSort.js","sortAlgorithms/mergeSort.js","sortVisualizer/sortVisualizer.jsx","sortAlgorithms/selectionSort.js","sortAlgorithms/insertionSort.js","App.js","index.js"],"names":["delay","updateDiv","currentElement","backgroundColor","speed","height","window","setTimeout","style","prevPivot","yellow","red","green","mergeSort","array","start","end","divs","mid","Math","floor","constants","l","r","result","ind","i","t","merge","quickSort","low","high","pivot","pivot_item","left","right","swap","partition","firstPos","secondPos","temp","ANIMATION_SPEED_MS","SortingVisualizer","props","state","this","generateArray","min","max","push","random","setState","length","arrayBars","document","getElementsByClassName","querySelector","children","len","j","tmp","selectionSort","current","insertionSort","className","id","md","type","step","onChange","e","changeSpeed","target","value","map","idx","onClick","resetArray","bubbleSort","testSortingAlgorithms","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f476ea64.chunk.js","sourcesContent":["let delay = 0;\n\nexport function updateDiv(\n  currentElement,\n  backgroundColor,\n  speed,\n  height\n) {\n  delay++\n  window.setTimeout(() => {\n    currentElement.style.backgroundColor = backgroundColor;\n    currentElement.style.height = `${height*2}px`;\n  }, (delay += speed));\n}","export const yellow = \"#fcf75e\";\nexport const red = \"#fe6f5e\";\nexport const green = '#355e3b';","import {updateDiv} from \"./visualize.js\"\nimport * as constants from '../constants.js'\n\n// to store the last pivot\nlet prevPivot;\n\nexport function quickSort(array, low, high, divs, speed) {\n  let pivot;\n  // termination condition\n  if (high > low) {\n    pivot = partition(array, low, high, divs, speed);\n    // to store the index of the previous pivot\n    prevPivot = pivot;\n    quickSort(array, low, pivot - 1, divs, speed);\n    quickSort(array, pivot + 1, high, divs, speed);\n    updateDiv(divs[prevPivot], constants.green, speed);\n  }\n}\n\nfunction partition(array, low, high, divs, speed) {\n  let pivot_item = array[low];\n\n  let left = low;\n  let right = high;\n  while (left < right) {\n    // move left while item < pivot\n    while (array[left] <= pivot_item) {\n      updateDiv(divs[left], constants.red, speed);\n      updateDiv(divs[left], constants.green, speed);\n      left++;\n    }\n\n    // move right while item > pivot\n    while (array[right] > pivot_item) {\n      updateDiv(divs[right], constants.red, speed);\n      updateDiv(divs[right], constants.green, speed);\n      right--;\n    }\n\n    if (left < right) {\n      updateDiv(divs[left], constants.red, speed);\n      updateDiv(divs[right], constants.red, speed);\n      swap(array, left, right, divs, speed);\n    }\n  }\n\n  array[low] = array[right];\n  updateDiv(divs[low], constants.green, speed, array[right]);\n  array[right] = pivot_item;\n  if (prevPivot) {\n    updateDiv(divs[prevPivot], constants.green, speed);\n  }\n  updateDiv(divs[right], constants.yellow, speed, pivot_item);\n\n  return right;\n}\n\nfunction swap(array, firstPos, secondPos, divs, speed) {\n  const temp = array[firstPos];\n  array[firstPos] = array[secondPos];\n  updateDiv(divs[firstPos], constants.red, speed, array[secondPos]);\n  array[secondPos] = temp;\n  updateDiv(divs[secondPos], constants.red, speed, temp);\n\n  // making the divs back to green after swap\n  updateDiv(divs[firstPos], constants.green, speed);\n  updateDiv(divs[secondPos], constants.green, speed);\n}","import {updateDiv} from \"./visualize.js\"\nimport * as constants from '../constants.js'\n\nexport function mergeSort(array, start, end, divs, speed) {\n    if (start < end) {\n        let mid = Math.floor((start + end) / 2);\n        updateDiv(divs[mid], constants.yellow, speed); // color update\n\n        mergeSort(array, start, mid, divs, speed);\n        mergeSort(array, mid + 1, end, divs, speed);\n\n        merge(array, start, mid, end, divs, speed);\n    }\n}\n\nfunction merge(array, start, mid, end, divs, speed) {\n  let l = start;\n  let r = mid + 1;\n\n  let result = [];\n  let ind = 0;\n\n  for (let i = start; i <= end; i++) {\n    if (l > mid) {\n        result[ind] = array[r];\n        updateDiv(divs[r], constants.red, speed, array[r]);\n        r += 1\n    } else if (array[l] < array[r] || r > end) {\n        result[ind] = array[l];\n        updateDiv(divs[l], constants.red, speed, array[l]);\n        l += 1\n    } else {\n        result[ind] = array[r];\n        updateDiv(divs[r], constants.red, speed, array[r]);\n        r += 1\n    }\n    ind +=1\n  }\n\n  for (let t = 0; t < ind; t++) {\n    array[start] = result[t];\n    updateDiv(divs[start], constants.green, speed, result[start]);\n    start += 1\n  }\n}","import React from 'react';\nimport {mergeSort} from '../sortAlgorithms/mergeSort.js';\nimport {quickSort} from '../sortAlgorithms/quickSort.js';\nimport {selectionSort} from '../sortAlgorithms/selectionSort.js';\nimport {insertionSort} from '../sortAlgorithms/insertionSort.js';\nimport './sortVisualizer.css';\n\nvar ANIMATION_SPEED_MS = 10;\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.generateArray();\n    }\n\n    generateArray() {\n//         let array = [17, 39, 28, 6];\n        let array = []\n        for (let i = 0; i < 10; i++) {\n            array.push(randomIntFromInterval(5, 100));\n        }\n        this.setState({array});\n        this.state.array = array;\n    }\n\n    resetArray() {\n        this.generateArray()\n        for (let i = 0; i < this.state.array.length; i++) {\n            const arrayBars = document.getElementsByClassName('bar');\n            arrayBars[i].style.backgroundColor = '#3C403D';\n            arrayBars[i].style.height = `${this.state.array[i] * 2}px`;\n        }\n    }\n\n    changeSpeed(speed) {\n        if (speed==='2') {\n            ANIMATION_SPEED_MS = 10;\n        } else if (speed==='1') {\n            ANIMATION_SPEED_MS = 100;\n        } else {\n            ANIMATION_SPEED_MS = 500;\n        }\n    }\n\n    mergeSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        mergeSort(this.state.array, 0, this.state.array.length - 1, divs, ANIMATION_SPEED_MS);\n    }\n\n    quickSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        quickSort(this.state.array, 0, this.state.array.length - 1, divs, ANIMATION_SPEED_MS);\n    }\n\n    selectionSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        selectionSort(this.state.array, divs, ANIMATION_SPEED_MS);\n    }\n\n    insertionSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        insertionSort(this.state.array, divs, ANIMATION_SPEED_MS);\n    }\n\n    bubbleSort() {}\n\n//     testSortingAlgorithms() {\n//         for (let i = 0; i < 100; i++) {\n//             const array = [];\n//             const length = randomIntFromInterval(1, 1000);\n//             for (let i = 0; i < length; i++) {\n//                 array.push(randomIntFromInterval(-1000, 1000));\n//             }\n//             const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//             const mergeSortedArray = getMergeSortAnimations(array.slice());\n//             console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray))\n//         }\n//     }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <div className=\"App\">\n            <selection className=\"container\">\n                <div id=\"slider-label\" md={1}>slow</div>\n                    <form id=\"sliderData\">\n                        <input id=\"slider\"\n                               type=\"range\"\n                               min=\"0\"\n                               max=\"2\"\n                               step=\"1\"\n                               onChange={e => this.changeSpeed(e.target.value)}/>\n                    </form>\n                <div id=\"slider-label\" md={1}>fast</div>\n            </selection>\n            <selection className=\"bars container\" id=\"visualizer-container\">\n                {array.map((value, idx) => (\n                    <div className='bar'\n                     key={idx}\n                     style={{height: `${value*2}px`}}>\n                    </div>\n                ))}\n            </selection>\n            <button id=\"button\" onClick={() => this.resetArray()}>GENERATE NEW ARRAY</button>\n            <selection className=\"container\">\n                <button id=\"button\"onClick={() => this.mergeSort()}>MERGE SORT</button>\n                <button id=\"button\" onClick={() => this.quickSort()}>QUICK SORT</button>\n                <button id=\"button\" onClick={() => this.selectionSort()}>SELECTION SORT</button>\n                <button id=\"button\" onClick={() => this.insertionSort()}>INSERTION SORT</button>\n                <button id=\"button\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button>\n            </selection>\n            <button id=\"button\" onClick={() => this.testSortingAlgorithms()}>TEST ALGOS</button>\n        </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n","import {updateDiv} from \"./visualize.js\"\nimport * as constants from '../constants.js'\n\nexport function selectionSort(array, divs, speed){\n    const len = array.length;\n\n  for (let i = 0; i < len; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < len; j++) {\n      updateDiv(divs[j - 1], constants.yellow, speed);\n      updateDiv(divs[j - 1], constants.green, speed);\n      updateDiv(divs[j], constants.yellow, speed);\n      updateDiv(divs[j], constants.green, speed);\n\n      if (array[min] > array[j]) {\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      updateDiv(divs[min], constants.red, speed);\n      updateDiv(divs[i], constants.red, speed);\n\n      let tmp = array[i];\n      array[i] = array[min];\n      updateDiv(divs[i], constants.red, speed, array[min]);\n      array[min] = tmp;\n      updateDiv(divs[min], constants.red, speed, tmp);\n\n      updateDiv(divs[i], constants.green, speed);\n      updateDiv(divs[min], constants.green, speed);\n    }\n\n    updateDiv(divs[i], constants.green, speed) // the part where sorted part is completed\n  }\n}","import {updateDiv} from \"./visualize.js\";\nimport * as constants from '../constants.js';\n\nexport function insertionSort(array, divs, speed) {\n    for (let i = 1; i < array.length; i++) {\n        updateDiv(divs[i], constants.red, speed);\n\n        let current = array[i];\n\n        let j = i-1;\n        while (j > -1 && current < array[j]) {\n            array[j+1] = array[j];\n            updateDiv(divs[j + 1], constants.green, speed, array[j]);\n            j--;\n            updateDiv(divs[j + 1], constants.yellow, speed, array[j]);\n        }\n        array[j+1] = current;\n        updateDiv(divs[j + 1], constants.green, speed, current);\n    }\n}","import SortVisualizer from './sortVisualizer/sortVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}