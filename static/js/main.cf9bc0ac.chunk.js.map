{"version":3,"sources":["sortAlgorithms/visualize.js","sortAlgorithms/mergeSort.js","sortAlgorithms/quickSort.js","sortVisualizer/sortVisualizer.jsx","App.js","index.js"],"names":["delay","updateDiv","currentElement","backgroundColor","height","window","setTimeout","style","prevPivot","red","green","mergeSort","array","start","end","divs","mid","Math","floor","l","r","result","ind","i","t","merge","quickSort","low","high","pivot","pivot_item","left","right","swap","partition","firstPos","secondPos","temp","SortingVisualizer","props","state","this","generateArray","min","max","push","random","setState","length","arrayBars","document","getElementsByClassName","speed","querySelector","children","className","id","md","type","step","onChange","e","changeSpeed","target","value","map","idx","onClick","resetArray","selectionSort","insertionSort","bubbleSort","testSortingAlgorithms","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"oRAAIA,EAAQ,EAEL,SAASC,EACdC,EACAC,EACAC,GAEAJ,IACAK,OAAOC,YAAW,WAChBJ,EAAeK,MAAMJ,gBAAkBA,EACvCD,EAAeK,MAAMH,OAArB,UAAwC,EAAPA,EAAjC,QACU,GAARJ,GCTN,ICCIQ,EDAAC,EAAM,UACNC,EAAQ,UAEL,SAASC,EAAUC,EAAOC,EAAOC,EAAKC,GACzC,GAAIF,EAAQC,EAAK,CACb,IAAIE,EAAMC,KAAKC,OAAOL,EAAQC,GAAO,GACrCb,EAAUc,EAAKC,GAPV,WASLL,EAAUC,EAAOC,EAAOG,EAAKD,GAC7BJ,EAAUC,EAAOI,EAAM,EAAGF,EAAKC,GAMvC,SAAeH,EAAOC,EAAOG,EAAKF,EAAKC,GAOrC,IANA,IAAII,EAAIN,EACJO,EAAIJ,EAAM,EAEVK,EAAS,GACTC,EAAM,EAEDC,EAAIV,EAAOU,GAAKT,EAAKS,IACxBJ,EAAIH,GACJK,EAAOC,GAAOV,EAAMQ,GACpBnB,EAAUc,EAAKK,GAAIX,EAAKG,EAAMQ,IAC9BA,GAAK,GACER,EAAMO,GAAKP,EAAMQ,IAAMA,EAAIN,GAClCO,EAAOC,GAAOV,EAAMO,GACpBlB,EAAUc,EAAKI,GAAIV,EAAKG,EAAMO,IAC9BA,GAAK,IAELE,EAAOC,GAAOV,EAAMQ,GACpBnB,EAAUc,EAAKK,GAAIX,EAAKG,EAAMQ,IAC9BA,GAAK,GAETE,GAAM,EAGR,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAKE,IACvBZ,EAAMC,GAASQ,EAAOG,GACtBvB,EAAUc,EAAKF,GAAQH,EAAOW,EAAOR,IACrCA,GAAS,EA/BLY,CAAMb,EAAOC,EAAOG,EAAKF,EAAKC,ICT/B,SAASW,EAAUd,EAAOe,EAAKC,EAAMb,GAC1C,IAAIc,EAEAD,EAAOD,IACTE,EASJ,SAAmBjB,EAAOe,EAAKC,EAAMb,GACnC,IAAIe,EAAalB,EAAMe,GAEnBI,EAAOJ,EACPK,EAAQJ,EACZ,KAAOG,EAAOC,GAAO,CAEnB,KAAOpB,EAAMmB,IAASD,GACpB7B,EAAUc,EAAKgB,GAAO,OACtB9B,EAAUc,EAAKgB,GAAO,SACtBA,IAIF,KAAOnB,EAAMoB,GAASF,GACpB7B,EAAUc,EAAKiB,GAAQ,OACvB/B,EAAUc,EAAKiB,GAAQ,SACvBA,IAGED,EAAOC,IACT/B,EAAUc,EAAKgB,GAAO,OACtB9B,EAAUc,EAAKiB,GAAQ,OACvBC,EAAKrB,EAAOmB,EAAMC,EAAOjB,IAI7BH,EAAMe,GAAOf,EAAMoB,GACnB/B,EAAUc,EAAKY,GAAM,QAASf,EAAMoB,IACpCpB,EAAMoB,GAASF,EACXtB,GACFP,EAAUc,EAAKP,GAAY,SAI7B,OAFAP,EAAUc,EAAKiB,GAAQ,SAAUF,GAE1BE,EA5CGE,CAAUtB,EAAOe,EAAKC,EAAMb,GAEpCP,EAAYqB,EACZH,EAAUd,EAAOe,EAAKE,EAAQ,EAAGd,GACjCW,EAAUd,EAAOiB,EAAQ,EAAGD,EAAMb,GAClCd,EAAUc,EAAKP,GAAY,UA0C/B,SAASyB,EAAKrB,EAAOuB,EAAUC,EAAWrB,GACxC,IAAMsB,EAAOzB,EAAMuB,GACnBvB,EAAMuB,GAAYvB,EAAMwB,GACxBnC,EAAUc,EAAKoB,GAAW,MAAOvB,EAAMwB,IACvCxB,EAAMwB,GAAaC,EACnBpC,EAAUc,EAAKqB,GAAY,MAAOC,GAGlCpC,EAAUc,EAAKoB,GAAW,SAC1BlC,EAAUc,EAAKqB,GAAY,S,UC1DRE,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT5B,MAAO,IAJI,E,gEASf6B,KAAKC,kB,sCAML,IADA,IA+FuBC,EAAKC,EA/FxBhC,EAAQ,GACHW,EAAI,EAAGA,EAAI,GAAIA,IACpBX,EAAMiC,MA6FaF,EA7Fc,EA6FTC,EA7FY,IA8FrC3B,KAAKC,MAAMD,KAAK6B,UAAYF,EAAMD,EAAM,GAAKA,KA5FhDF,KAAKM,SAAS,CAACnC,UACf6B,KAAKD,MAAM5B,MAAQA,I,mCAInB6B,KAAKC,gBACL,IAAK,IAAInB,EAAI,EAAGA,EAAIkB,KAAKD,MAAM5B,MAAMoC,OAAQzB,IAAK,CAC9C,IAAM0B,EAAYC,SAASC,uBAAuB,OAClDF,EAAU1B,GAAGhB,MAAMJ,gBAAkB,UACrC8C,EAAU1B,GAAGhB,MAAMH,OAAnB,UAAqD,EAAtBqC,KAAKD,MAAM5B,MAAMW,GAAhD,S,kCAII6B,GACI,MAARA,EACqB,GACN,MAARA,EACc,IAEA,M,kCAKzB,IAAMrC,EAAOmC,SAASG,cAAc,yBAAyBC,SAC7D3C,EAAU8B,KAAKD,MAAM5B,MAAO,EAAG6B,KAAKD,MAAM5B,MAAMoC,OAAS,EAAGjC,K,kCAI5D,IAAMA,EAAOmC,SAASG,cAAc,yBAAyBC,SAC7D5B,EAAUe,KAAKD,MAAM5B,MAAO,EAAG6B,KAAKD,MAAM5B,MAAMoC,OAAS,EAAGjC,K,uJAsBtD,IAAD,OACEH,EAAS6B,KAAKD,MAAd5B,MAEP,OACA,sBAAK2C,UAAU,MAAf,UACI,4BAAWA,UAAU,YAArB,UACI,qBAAKC,GAAG,eAAeC,GAAI,EAA3B,kBACI,sBAAMD,GAAG,aAAT,SACI,uBAAOA,GAAG,SACHE,KAAK,QACLf,IAAI,IACJC,IAAI,IACJe,KAAK,IACLC,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOC,YAExD,qBAAKR,GAAG,eAAeC,GAAI,EAA3B,qBAEJ,2BAAWF,UAAU,iBAAiBC,GAAG,uBAAzC,SACK5C,EAAMqD,KAAI,SAACD,EAAOE,GAAR,OACP,qBAAKX,UAAU,MAEdhD,MAAO,CAACH,OAAO,GAAD,OAAW,EAAN4D,EAAL,QADTE,QAKd,wBAAQV,GAAG,SAASW,QAAS,kBAAM,EAAKC,cAAxC,gCACA,4BAAWb,UAAU,YAArB,UACI,wBAAQC,GAAG,SAAQW,QAAS,kBAAM,EAAKxD,aAAvC,wBACA,wBAAQ6C,GAAG,SAASW,QAAS,kBAAM,EAAKzC,aAAxC,wBACA,wBAAQ8B,GAAG,SAASW,QAAS,kBAAM,EAAKE,iBAAxC,4BACA,wBAAQb,GAAG,SAASW,QAAS,kBAAM,EAAKG,iBAAxC,4BACA,wBAAQd,GAAG,SAASW,QAAS,kBAAM,EAAKI,cAAxC,4BAEJ,wBAAQf,GAAG,SAASW,QAAS,kBAAM,EAAKK,yBAAxC,+B,GAxGmCC,IAAMC,W,MCItCC,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCDNqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,W","file":"static/js/main.cf9bc0ac.chunk.js","sourcesContent":["let delay = 0;\n\nexport function updateDiv(\n  currentElement,\n  backgroundColor,\n  height\n) {\n  delay++\n  window.setTimeout(() => {\n    currentElement.style.backgroundColor = backgroundColor;\n    currentElement.style.height = `${height*2}px`;\n  }, (delay * 10));\n}","import {updateDiv} from \"./visualize.js\"\n\nlet yellow = \"#fcf75e\"\nlet red = \"#fe6f5e\"\nlet green = '#355e3b'\n\nexport function mergeSort(array, start, end, divs) {\n    if (start < end) {\n        let mid = Math.floor((start + end) / 2);\n        updateDiv(divs[mid], yellow); // color update\n\n        mergeSort(array, start, mid, divs);\n        mergeSort(array, mid + 1, end, divs);\n\n        merge(array, start, mid, end, divs);\n    }\n}\n\nfunction merge(array, start, mid, end, divs) {\n  let l = start;\n  let r = mid + 1;\n\n  let result = [];\n  let ind = 0;\n\n  for (let i = start; i <= end; i++) {\n    if (l > mid) {\n        result[ind] = array[r];\n        updateDiv(divs[r], red, array[r]);\n        r += 1\n    } else if (array[l] < array[r] || r > end) {\n        result[ind] = array[l];\n        updateDiv(divs[l], red, array[l]);\n        l += 1\n    } else {\n        result[ind] = array[r];\n        updateDiv(divs[r], red, array[r]);\n        r += 1\n    }\n    ind +=1\n  }\n\n  for (let t = 0; t < ind; t++) {\n    array[start] = result[t];\n    updateDiv(divs[start], green, result[start]);\n    start += 1\n  }\n}","import {updateDiv} from \"./visualize.js\"\n\n// to store the last pivot\nlet prevPivot;\n\nexport function quickSort(array, low, high, divs) {\n  let pivot;\n  // termination condition\n  if (high > low) {\n    pivot = partition(array, low, high, divs);\n    // to store the index of the previous pivot\n    prevPivot = pivot;\n    quickSort(array, low, pivot - 1, divs,);\n    quickSort(array, pivot + 1, high, divs);\n    updateDiv(divs[prevPivot], \"green\");\n  }\n}\n\nfunction partition(array, low, high, divs) {\n  let pivot_item = array[low];\n\n  let left = low;\n  let right = high;\n  while (left < right) {\n    // move left while item < pivot\n    while (array[left] <= pivot_item) {\n      updateDiv(divs[left], \"red\");\n      updateDiv(divs[left], \"green\");\n      left++;\n    }\n\n    // move right while item > pivot\n    while (array[right] > pivot_item) {\n      updateDiv(divs[right], \"red\");\n      updateDiv(divs[right], \"green\");\n      right--;\n    }\n\n    if (left < right) {\n      updateDiv(divs[left], \"red\");\n      updateDiv(divs[right], \"red\");\n      swap(array, left, right, divs);\n    }\n  }\n\n  array[low] = array[right];\n  updateDiv(divs[low], \"green\", array[right]);\n  array[right] = pivot_item;\n  if (prevPivot) {\n    updateDiv(divs[prevPivot], \"green\");\n  }\n  updateDiv(divs[right], \"orange\", pivot_item);\n\n  return right;\n}\n\nfunction swap(array, firstPos, secondPos, divs) {\n  const temp = array[firstPos];\n  array[firstPos] = array[secondPos];\n  updateDiv(divs[firstPos], \"red\", array[secondPos]);\n  array[secondPos] = temp;\n  updateDiv(divs[secondPos], \"red\", temp);\n\n  // making the divs back to green after swap\n  updateDiv(divs[firstPos], \"green\");\n  updateDiv(divs[secondPos], \"green\");\n}","import React from 'react';\nimport {mergeSort} from '../sortAlgorithms/mergeSort.js';\nimport {quickSort} from '../sortAlgorithms/quickSort.js'\nimport './sortVisualizer.css';\n\nvar ANIMATION_SPEED_MS = 10;\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.generateArray();\n    }\n\n    generateArray() {\n//         let array = [17, 39, 28, 6];\n        let array = []\n        for (let i = 0; i < 10; i++) {\n            array.push(randomIntFromInterval(5, 100));\n        }\n        this.setState({array});\n        this.state.array = array;\n    }\n\n    resetArray() {\n        this.generateArray()\n        for (let i = 0; i < this.state.array.length; i++) {\n            const arrayBars = document.getElementsByClassName('bar');\n            arrayBars[i].style.backgroundColor = '#3C403D';\n            arrayBars[i].style.height = `${this.state.array[i] * 2}px`;\n        }\n    }\n\n    changeSpeed(speed) {\n        if (speed==='2') {\n            ANIMATION_SPEED_MS = 10;\n        } else if (speed==='1') {\n            ANIMATION_SPEED_MS = 100;\n        } else {\n            ANIMATION_SPEED_MS = 500;\n        }\n    }\n\n    mergeSort() {\n        const divs = document.querySelector(\"#visualizer-container\").children;\n        mergeSort(this.state.array, 0, this.state.array.length - 1, divs);\n    }\n\n    quickSort() {\n        const divs = document.querySelector(\"#visualizer-container\").children;\n        quickSort(this.state.array, 0, this.state.array.length - 1, divs)\n    }\n\n    selectionSort() {}\n\n    insertionSort() {}\n\n    bubbleSort() {}\n\n//     testSortingAlgorithms() {\n//         for (let i = 0; i < 100; i++) {\n//             const array = [];\n//             const length = randomIntFromInterval(1, 1000);\n//             for (let i = 0; i < length; i++) {\n//                 array.push(randomIntFromInterval(-1000, 1000));\n//             }\n//             const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//             const mergeSortedArray = getMergeSortAnimations(array.slice());\n//             console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray))\n//         }\n//     }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <div className=\"App\">\n            <selection className=\"container\">\n                <div id=\"slider-label\" md={1}>slow</div>\n                    <form id=\"sliderData\">\n                        <input id=\"slider\"\n                               type=\"range\"\n                               min=\"0\"\n                               max=\"2\"\n                               step=\"1\"\n                               onChange={e => this.changeSpeed(e.target.value)}/>\n                    </form>\n                <div id=\"slider-label\" md={1}>fast</div>\n            </selection>\n            <selection className=\"bars container\" id=\"visualizer-container\">\n                {array.map((value, idx) => (\n                    <div className='bar'\n                     key={idx}\n                     style={{height: `${value*2}px`}}>\n                    </div>\n                ))}\n            </selection>\n            <button id=\"button\" onClick={() => this.resetArray()}>GENERATE NEW ARRAY</button>\n            <selection className=\"container\">\n                <button id=\"button\"onClick={() => this.mergeSort()}>MERGE SORT</button>\n                <button id=\"button\" onClick={() => this.quickSort()}>QUICK SORT</button>\n                <button id=\"button\" onClick={() => this.selectionSort()}>SELECTION SORT</button>\n                <button id=\"button\" onClick={() => this.insertionSort()}>INSERTION SORT</button>\n                <button id=\"button\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button>\n            </selection>\n            <button id=\"button\" onClick={() => this.testSortingAlgorithms()}>TEST ALGOS</button>\n        </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n","import SortVisualizer from './sortVisualizer/sortVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}