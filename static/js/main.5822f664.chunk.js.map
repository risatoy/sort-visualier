{"version":3,"sources":["sortAlgorithms/visualize.js","constants.js","sortAlgorithms/quickSort.js","sortAlgorithms/mergeSort.js","sortVisualizer/sortVisualizer.jsx","sortAlgorithms/selectionSort.js","sortAlgorithms/insertionSort.js","App.js","index.js"],"names":["delay","updateDiv","currentElement","backgroundColor","height","window","setTimeout","style","prevPivot","yellow","red","green","mergeSort","array","start","end","divs","mid","Math","floor","constants","l","r","result","ind","i","t","merge","quickSort","low","high","pivot","pivot_item","left","right","swap","partition","firstPos","secondPos","temp","SortingVisualizer","props","state","this","generateArray","min","max","push","random","setState","length","arrayBars","document","getElementsByClassName","speed","querySelector","children","len","j","tmp","selectionSort","current","insertionSort","className","id","md","type","step","onChange","e","changeSpeed","target","value","map","idx","onClick","resetArray","bubbleSort","testSortingAlgorithms","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5822f664.chunk.js","sourcesContent":["let delay = 0;\n\nexport function updateDiv(\n  currentElement,\n  backgroundColor,\n  height\n) {\n  delay++\n  window.setTimeout(() => {\n    currentElement.style.backgroundColor = backgroundColor;\n    currentElement.style.height = `${height*2}px`;\n  }, (delay * 10));\n}","export const yellow = \"#fcf75e\";\nexport const red = \"#fe6f5e\";\nexport const green = '#355e3b';","import {updateDiv} from \"./visualize.js\"\nimport * as constants from '../constants.js'\n\n// to store the last pivot\nlet prevPivot;\n\nexport function quickSort(array, low, high, divs) {\n  let pivot;\n  // termination condition\n  if (high > low) {\n    pivot = partition(array, low, high, divs);\n    // to store the index of the previous pivot\n    prevPivot = pivot;\n    quickSort(array, low, pivot - 1, divs,);\n    quickSort(array, pivot + 1, high, divs);\n    updateDiv(divs[prevPivot], constants.green);\n  }\n}\n\nfunction partition(array, low, high, divs) {\n  let pivot_item = array[low];\n\n  let left = low;\n  let right = high;\n  while (left < right) {\n    // move left while item < pivot\n    while (array[left] <= pivot_item) {\n      updateDiv(divs[left], constants.red);\n      updateDiv(divs[left], constants.green);\n      left++;\n    }\n\n    // move right while item > pivot\n    while (array[right] > pivot_item) {\n      updateDiv(divs[right], constants.red);\n      updateDiv(divs[right], constants.green);\n      right--;\n    }\n\n    if (left < right) {\n      updateDiv(divs[left], constants.red);\n      updateDiv(divs[right], constants.red);\n      swap(array, left, right, divs);\n    }\n  }\n\n  array[low] = array[right];\n  updateDiv(divs[low], constants.green, array[right]);\n  array[right] = pivot_item;\n  if (prevPivot) {\n    updateDiv(divs[prevPivot], constants.green);\n  }\n  updateDiv(divs[right], constants.yellow, pivot_item);\n\n  return right;\n}\n\nfunction swap(array, firstPos, secondPos, divs) {\n  const temp = array[firstPos];\n  array[firstPos] = array[secondPos];\n  updateDiv(divs[firstPos], constants.red, array[secondPos]);\n  array[secondPos] = temp;\n  updateDiv(divs[secondPos], constants.red, temp);\n\n  // making the divs back to green after swap\n  updateDiv(divs[firstPos], constants.green);\n  updateDiv(divs[secondPos], constants.green);\n}","import {updateDiv} from \"./visualize.js\"\nimport * as constants from '../constants.js'\n\nexport function mergeSort(array, start, end, divs) {\n    if (start < end) {\n        let mid = Math.floor((start + end) / 2);\n        updateDiv(divs[mid], constants.yellow); // color update\n\n        mergeSort(array, start, mid, divs);\n        mergeSort(array, mid + 1, end, divs);\n\n        merge(array, start, mid, end, divs);\n    }\n}\n\nfunction merge(array, start, mid, end, divs) {\n  let l = start;\n  let r = mid + 1;\n\n  let result = [];\n  let ind = 0;\n\n  for (let i = start; i <= end; i++) {\n    if (l > mid) {\n        result[ind] = array[r];\n        updateDiv(divs[r], constants.red, array[r]);\n        r += 1\n    } else if (array[l] < array[r] || r > end) {\n        result[ind] = array[l];\n        updateDiv(divs[l], constants.red, array[l]);\n        l += 1\n    } else {\n        result[ind] = array[r];\n        updateDiv(divs[r], constants.red, array[r]);\n        r += 1\n    }\n    ind +=1\n  }\n\n  for (let t = 0; t < ind; t++) {\n    array[start] = result[t];\n    updateDiv(divs[start], constants.green, result[start]);\n    start += 1\n  }\n}","import React from 'react';\nimport {mergeSort} from '../sortAlgorithms/mergeSort.js';\nimport {quickSort} from '../sortAlgorithms/quickSort.js';\nimport {selectionSort} from '../sortAlgorithms/selectionSort.js';\nimport {insertionSort} from '../sortAlgorithms/insertionSort.js';\nimport './sortVisualizer.css';\n\nvar ANIMATION_SPEED_MS = 10;\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.generateArray();\n    }\n\n    generateArray() {\n//         let array = [17, 39, 28, 6];\n        let array = []\n        for (let i = 0; i < 10; i++) {\n            array.push(randomIntFromInterval(5, 100));\n        }\n        this.setState({array});\n        this.state.array = array;\n    }\n\n    resetArray() {\n        this.generateArray()\n        for (let i = 0; i < this.state.array.length; i++) {\n            const arrayBars = document.getElementsByClassName('bar');\n            arrayBars[i].style.backgroundColor = '#3C403D';\n            arrayBars[i].style.height = `${this.state.array[i] * 2}px`;\n        }\n    }\n\n    changeSpeed(speed) {\n        if (speed==='2') {\n            ANIMATION_SPEED_MS = 10;\n        } else if (speed==='1') {\n            ANIMATION_SPEED_MS = 100;\n        } else {\n            ANIMATION_SPEED_MS = 500;\n        }\n    }\n\n    mergeSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        mergeSort(this.state.array, 0, this.state.array.length - 1, divs);\n    }\n\n    quickSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        quickSort(this.state.array, 0, this.state.array.length - 1, divs);\n    }\n\n    selectionSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        selectionSort(this.state.array, divs);\n    }\n\n    insertionSort() {\n        const divs = document.querySelector('#visualizer-container').children;\n        insertionSort(this.state.array, divs);\n    }\n\n    bubbleSort() {}\n\n//     testSortingAlgorithms() {\n//         for (let i = 0; i < 100; i++) {\n//             const array = [];\n//             const length = randomIntFromInterval(1, 1000);\n//             for (let i = 0; i < length; i++) {\n//                 array.push(randomIntFromInterval(-1000, 1000));\n//             }\n//             const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//             const mergeSortedArray = getMergeSortAnimations(array.slice());\n//             console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray))\n//         }\n//     }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <div className=\"App\">\n            <selection className=\"container\">\n                <div id=\"slider-label\" md={1}>slow</div>\n                    <form id=\"sliderData\">\n                        <input id=\"slider\"\n                               type=\"range\"\n                               min=\"0\"\n                               max=\"2\"\n                               step=\"1\"\n                               onChange={e => this.changeSpeed(e.target.value)}/>\n                    </form>\n                <div id=\"slider-label\" md={1}>fast</div>\n            </selection>\n            <selection className=\"bars container\" id=\"visualizer-container\">\n                {array.map((value, idx) => (\n                    <div className='bar'\n                     key={idx}\n                     style={{height: `${value*2}px`}}>\n                    </div>\n                ))}\n            </selection>\n            <button id=\"button\" onClick={() => this.resetArray()}>GENERATE NEW ARRAY</button>\n            <selection className=\"container\">\n                <button id=\"button\"onClick={() => this.mergeSort()}>MERGE SORT</button>\n                <button id=\"button\" onClick={() => this.quickSort()}>QUICK SORT</button>\n                <button id=\"button\" onClick={() => this.selectionSort()}>SELECTION SORT</button>\n                <button id=\"button\" onClick={() => this.insertionSort()}>INSERTION SORT</button>\n                <button id=\"button\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button>\n            </selection>\n            <button id=\"button\" onClick={() => this.testSortingAlgorithms()}>TEST ALGOS</button>\n        </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n","import {updateDiv} from \"./visualize.js\"\nimport * as constants from '../constants.js'\n\nexport function selectionSort(array, divs){\n    const len = array.length;\n\n  for (let i = 0; i < len; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < len; j++) {\n      updateDiv(divs[j - 1], constants.yellow);\n      updateDiv(divs[j - 1], constants.green);\n      updateDiv(divs[j], constants.yellow);\n      updateDiv(divs[j], constants.green);\n\n      if (array[min] > array[j]) {\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      updateDiv(divs[min], constants.red);\n      updateDiv(divs[i], constants.red);\n\n      let tmp = array[i];\n      array[i] = array[min];\n      updateDiv(divs[i], constants.red, array[min]);\n      array[min] = tmp;\n      updateDiv(divs[min], constants.red, tmp);\n\n      updateDiv(divs[i], constants.green);\n      updateDiv(divs[min], constants.green);\n    }\n\n    updateDiv(divs[i], constants.green) // the part where sorted part is completed\n  }\n}","import {updateDiv} from \"./visualize.js\";\nimport * as constants from '../constants.js';\n\nexport function insertionSort(array, divs) {\n    for (let i = 1; i < array.length; i++) {\n        updateDiv(divs[i], constants.red);\n\n        let current = array[i];\n\n        let j = i-1;\n        while (j > -1 && current < array[j]) {\n            array[j+1] = array[j];\n            updateDiv(divs[j + 1], constants.green, array[j]);\n            j--;\n            updateDiv(divs[j + 1], constants.yellow, array[j]);\n        }\n        array[j+1] = current;\n        updateDiv(divs[j + 1], constants.green, current);\n    }\n}","import SortVisualizer from './sortVisualizer/sortVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}