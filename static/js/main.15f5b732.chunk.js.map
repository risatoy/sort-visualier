{"version":3,"sources":["sortVisualizer/sortVisualizer.jsx","constants.js","sortAlgorithms/mergeSort.js","sortAlgorithms/quickSort.js","sortAlgorithms/selectionSort.js","sortAlgorithms/insertionSort.js","App.js","index.js"],"names":["ANIMATION_SPEED_MS","delay","processes","SortingVisualizer","props","state","array","divs","this","generateArray","generateDivs","min","max","i","push","Math","floor","random","setState","document","querySelector","children","length","clearTimeout","shift","stopProcess","arrayBars","getElementsByClassName","style","backgroundColor","height","speed","mergeSort","quickSort","selectionSort","insertionSort","className","id","md","type","step","onChange","e","changeSpeed","target","value","map","idx","onClick","resetArray","bubbleSort","testSortingAlgorithms","React","Component","updateDiv","currentElement","process","window","setTimeout","yellow","red","green","start","end","mid","constants","l","r","result","ind","t","merge","prevPivot","low","high","pivot","pivot_item","left","right","swap","partition","firstPos","secondPos","temp","len","j","tmp","current","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.15f5b732.chunk.js","sourcesContent":["import React from 'react';\nimport {mergeSort} from '../sortAlgorithms/mergeSort.js';\nimport {quickSort} from '../sortAlgorithms/quickSort.js';\nimport {selectionSort} from '../sortAlgorithms/selectionSort.js';\nimport {insertionSort} from '../sortAlgorithms/insertionSort.js';\nimport './sortVisualizer.css';\n\nvar ANIMATION_SPEED_MS = 10;\n\nlet delay = 0;\nlet processes = [];\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            divs: [],\n        };\n    }\n\n    componentDidMount() {\n        this.generateArray();\n        this.generateDivs();\n    }\n\n    generateArray() {\n//         let array = [17, 39, 28, 6];\n        let array = []\n        for (let i = 0; i < 10; i++) {\n            array.push(randomIntFromInterval(5, 100));\n        }\n        this.setState({array});\n        this.state.array = array;\n    }\n\n    generateDivs() {\n        this.state.divs = document.querySelector('#visualizer-container').children;\n    }\n\n    resetArray() {\n        stopProcess(); // to kill running processes\n        this.generateArray()\n        for (let i = 0; i < this.state.array.length; i++) {\n            const arrayBars = document.getElementsByClassName('bar');\n            arrayBars[i].style.backgroundColor = '#3C403D';\n            arrayBars[i].style.height = `${this.state.array[i] * 2}px`;\n        }\n    }\n\n    changeSpeed(speed) {\n        if (speed==='2') {\n            ANIMATION_SPEED_MS = 10;\n        } else if (speed==='1') {\n            ANIMATION_SPEED_MS = 100;\n        } else {\n            ANIMATION_SPEED_MS = 500;\n        }\n    }\n\n    mergeSort() {\n        if (processes.length === 0) {\n            delay = 0;\n            mergeSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        }\n    }\n\n    quickSort() {\n        if (processes.length === 0) {\n            delay = 0;\n            quickSort(this.state.array, 0, this.state.array.length - 1, this.state.divs, ANIMATION_SPEED_MS);\n        }\n    }\n\n    selectionSort() {\n        if (processes.length === 0) {\n            delay = 0;\n            selectionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n        }\n    }\n\n    insertionSort() {\n        if (processes.length === 0) {\n            delay = 0;\n            insertionSort(this.state.array, this.state.divs, ANIMATION_SPEED_MS);\n        }\n    }\n\n    bubbleSort() {}\n\n//     testSortingAlgorithms() {\n//         for (let i = 0; i < 100; i++) {\n//             const array = [];\n//             const length = randomIntFromInterval(1, 1000);\n//             for (let i = 0; i < length; i++) {\n//                 array.push(randomIntFromInterval(-1000, 1000));\n//             }\n//             const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n//             const mergeSortedArray = getMergeSortAnimations(array.slice());\n//             console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray))\n//         }\n//     }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <div className=\"App\">\n            <selection className=\"container\">\n                <div id=\"slider-label\" md={1}>slow</div>\n                    <form id=\"sliderData\">\n                        <input id=\"slider\"\n                               type=\"range\"\n                               min=\"0\"\n                               max=\"2\"\n                               step=\"1\"\n                               onChange={e => this.changeSpeed(e.target.value)}/>\n                    </form>\n                <div id=\"slider-label\" md={1}>fast</div>\n            </selection>\n            <selection className=\"bars container\" id=\"visualizer-container\">\n                {array.map((value, idx) => (\n                    <div className='bar'\n                     key={idx}\n                     style={{height: `${value*2}px`}}>\n                    </div>\n                ))}\n            </selection>\n            <button id=\"button\" onClick={() => this.resetArray()}>GENERATE NEW ARRAY</button>\n            <selection className=\"container\">\n                <button id=\"button\"onClick={() => this.mergeSort()}>MERGE SORT</button>\n                <button id=\"button\" onClick={() => this.quickSort()}>QUICK SORT</button>\n                <button id=\"button\" onClick={() => this.selectionSort()}>SELECTION SORT</button>\n                <button id=\"button\" onClick={() => this.insertionSort()}>INSERTION SORT</button>\n                <button id=\"button\" onClick={() => this.bubbleSort()}>BUBBLE SORT</button>\n            </selection>\n            <button id=\"button\" onClick={() => this.testSortingAlgorithms()}>TEST ALGOS</button>\n        </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n\nexport function updateDiv(\n  currentElement,\n  backgroundColor,\n  speed,\n  height\n) {\n    delay++\n    process = window.setTimeout(() => {\n    currentElement.style.backgroundColor = backgroundColor;\n    currentElement.style.height = `${height*2}px`;\n    }, (delay += speed));\n    processes.push(process);\n}\n\nfunction stopProcess() {\n    while (processes.length !== 0 ) {\n        clearTimeout(processes[0]);\n        processes.shift();\n     }\n}\n","export const yellow = \"#fcf75e\";\nexport const red = \"#fe6f5e\";\nexport const green = '#355e3b';","import {updateDiv} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\nexport function mergeSort(array, start, end, divs, speed) {\n    if (start < end) {\n        let mid = Math.floor((start + end) / 2);\n        updateDiv(divs[mid], constants.yellow, speed); // color update\n\n        mergeSort(array, start, mid, divs, speed);\n        mergeSort(array, mid + 1, end, divs, speed);\n\n        merge(array, start, mid, end, divs, speed);\n    }\n}\n\nfunction merge(array, start, mid, end, divs, speed) {\n  let l = start;\n  let r = mid + 1;\n\n  let result = [];\n  let ind = 0;\n\n  for (let i = start; i <= end; i++) {\n    if (l > mid) {\n        result[ind] = array[r];\n        updateDiv(divs[r], constants.red, speed, array[r]);\n        r += 1\n    } else if (array[l] < array[r] || r > end) {\n        result[ind] = array[l];\n        updateDiv(divs[l], constants.red, speed, array[l]);\n        l += 1\n    } else {\n        result[ind] = array[r];\n        updateDiv(divs[r], constants.red, speed, array[r]);\n        r += 1\n    }\n    ind +=1\n  }\n\n  for (let t = 0; t < ind; t++) {\n    array[start] = result[t];\n    updateDiv(divs[start], constants.green, speed, result[start]);\n    start += 1\n  }\n}","import {updateDiv} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\n// to store the last pivot\nlet prevPivot;\n\nexport function quickSort(array, low, high, divs, speed) {\n  let pivot;\n  // termination condition\n  if (high > low) {\n    pivot = partition(array, low, high, divs, speed);\n    // to store the index of the previous pivot\n    prevPivot = pivot;\n    quickSort(array, low, pivot - 1, divs, speed);\n    quickSort(array, pivot + 1, high, divs, speed);\n    updateDiv(divs[prevPivot], constants.green, speed);\n  }\n}\n\nfunction partition(array, low, high, divs, speed) {\n  let pivot_item = array[low];\n\n  let left = low;\n  let right = high;\n  while (left < right) {\n    // move left while item < pivot\n    while (array[left] <= pivot_item) {\n      updateDiv(divs[left], constants.red, speed);\n      updateDiv(divs[left], constants.green, speed);\n      left++;\n    }\n\n    // move right while item > pivot\n    while (array[right] > pivot_item) {\n      updateDiv(divs[right], constants.red, speed);\n      updateDiv(divs[right], constants.green, speed);\n      right--;\n    }\n\n    if (left < right) {\n      updateDiv(divs[left], constants.red, speed);\n      updateDiv(divs[right], constants.red, speed);\n      swap(array, left, right, divs, speed);\n    }\n  }\n\n  array[low] = array[right];\n  updateDiv(divs[low], constants.green, speed, array[right]);\n  array[right] = pivot_item;\n  if (prevPivot) {\n    updateDiv(divs[prevPivot], constants.green, speed);\n  }\n  updateDiv(divs[right], constants.yellow, speed, pivot_item);\n\n  return right;\n}\n\nfunction swap(array, firstPos, secondPos, divs, speed) {\n  const temp = array[firstPos];\n  array[firstPos] = array[secondPos];\n  updateDiv(divs[firstPos], constants.red, speed, array[secondPos]);\n  array[secondPos] = temp;\n  updateDiv(divs[secondPos], constants.red, speed, temp);\n\n  // making the divs back to green after swap\n  updateDiv(divs[firstPos], constants.green, speed);\n  updateDiv(divs[secondPos], constants.green, speed);\n}","import {updateDiv} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js'\n\nexport function selectionSort(array, divs, speed){\n    const len = array.length;\n\n  for (let i = 0; i < len; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < len; j++) {\n      updateDiv(divs[j - 1], constants.yellow, speed);\n      updateDiv(divs[j - 1], constants.green, speed);\n      updateDiv(divs[j], constants.yellow, speed);\n      updateDiv(divs[j], constants.green, speed);\n\n      if (array[min] > array[j]) {\n        min = j;\n      }\n    }\n\n    if (min !== i) {\n      updateDiv(divs[min], constants.red, speed);\n      updateDiv(divs[i], constants.red, speed);\n\n      let tmp = array[i];\n      array[i] = array[min];\n      updateDiv(divs[i], constants.red, speed, array[min]);\n      array[min] = tmp;\n      updateDiv(divs[min], constants.red, speed, tmp);\n\n      updateDiv(divs[i], constants.green, speed);\n      updateDiv(divs[min], constants.green, speed);\n    }\n\n    updateDiv(divs[i], constants.green, speed) // the part where sorted part is completed\n  }\n}","import {updateDiv} from \"../sortVisualizer/sortVisualizer.jsx\";\nimport * as constants from '../constants.js';\n\nexport function insertionSort(array, divs, speed) {\n    for (let i = 1; i < array.length; i++) {\n        updateDiv(divs[i], constants.red, speed);\n\n        let current = array[i];\n\n        let j = i-1;\n        while (j > -1 && current < array[j]) {\n            array[j+1] = array[j];\n            updateDiv(divs[j + 1], constants.green, speed, array[j]);\n            j--;\n            updateDiv(divs[j + 1], constants.yellow, speed, array[j]);\n        }\n        array[j+1] = current;\n        updateDiv(divs[j + 1], constants.green, speed, current);\n    }\n}","import SortVisualizer from './sortVisualizer/sortVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}